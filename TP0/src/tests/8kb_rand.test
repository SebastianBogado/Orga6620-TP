ching the first two characters of its hash. The rest of the hash is used as the file name for that object.

Git stores each revision of a file as a unique blob object. The relationships between the blobs can be found through examining the tree and commit objects. Newly added objects are stored in their entirety using zlib compression. This can consume a large amount of disk space quickly, so objects can be combined into packs, which use delta compression to save space, storing blobs as their changes relative to other blobs.

Git servers typically listen on TCP port 9418.[40]
Terminology and structure

A Git repository — data and metadata — is completely contained within its directory, so a normal system-level copy (or rename, or delete) of an entire Git repository is a safe operation. The resulting copy is both independent of and unaware of the original.
Data
Working tree

The files and directories — the things typically considered to be "under source control, but checked out" that the user changes in an editor or otherwise — live under the top repository directory, but outside of its .git/ directory.

During a normal work session, one can choose to ask Git to note for later some or all of the differences between how the files are now and how Git's permanent repository remembers them. The place it remembers them is called "the staging area" (or index) and remembering them is called "staging". One can also remove or exclude selected changes from staging if it suits. Staging diffs is easy, and is similar in concept to creating a patch file. Staging is the precursor to committing those changes as a permanent record in the Git repository.
.gitignore

This is a plain text configuration file which contains filename patterns that git should consider invisible for the purposes of source control — e.g., *.o, *.class, bin/

    it is outside the .git directory with the "normal" files, in order to keep it under source control: everyone in a project typically needs the same exclusions.
    it can refer to itself, to exclude itself from source control

Metadata

The "behind the scenes" source control elements live within the .git/ directory at the root of the repository.
Commits

    commits, representing checked-in versions of files and directories live in .git/objects
        each commit represents a snapshot of the full tree of files current at the point the commit was created.
        each commit is uniquely identified to Git commands by a 40-character identifier, but it's usually sufficiently unique to provide only the first seven characters of it.
            git will complain if a shortened identifier is ambiguous.
        each commit has a reference to its parent commit(s).
            collectively, all the commits form a tree-like structure based on the parent relationship, whence the concept of branches derives.

Index (stage)

    the index — a set of file changes being collected (with "git add") to create in the repository as a single commit (version)
        file changes explicitly added to the index are termed "staged changes".
        file changes made but not (or not yet) added to the index are termed "unstaged changes".
        staged and unstaged changes coexist harmlessly (and can be seen with "git status").
        creating a commit (with "git commit") copies the staged changes into a new commit and then clears the index
            creating a commit does not affect the working tree.
            the new commit becomes the current commit and incorporates the staged changes, so they no longer show up as differences between the commit and the working tree.
            unstaged changes thus continue to show as differences, until added to the index (or reverted).
        the index can even be told to stage selected "hunks" (patches/blocks of change) within a file, while leaving other hunks within the very same file unstaged.

Branches and tags

    these are ways to refer to particular commits, and they live in .git/refs and .git/packed-refs
        a tag marks a particular commit and is only ever moved manually; other SCMs might call it a label.
        a branch is a special mobile tag that is updated whenever a commit is made to that branch.
            a branch is thus really a label that is always on the commit that most SCMs would call the branch/HEAD version.
            local branches live in .git/refs/heads
            branches from other repositories are maintained in .git/refs/remotes
    Branches and tags are very cheap and almost identical — they can be made whenever one wants to remember a particular point in development.
        .git/refs/heads/master contains a 40 character identifier for the commit that is the master branch. Much Git metadata is in plain text files.

Stash

    the stash ("git stash") is a special list of commits used to hold temporary changes.

Configuration

    information about which remote repositories this repository can talk to, how local branches relate to remote branches, etc., lives in .git/config, in plain text.

Hooks

    special scripts that run for various source-control events to enforce policy.
    hooks are within the .git directory and not therefore under source control, i.e., not cloned from remote repositories.

Global settings

User preferences — real name, email address, preferences, command aliases, etc. — are held in a user's home directory in a file called ~/.gitconfig.
Working environment

The working environment looks much like it would as if Git wasn't around: the working tree is a normal directory with only the subtle presence of a .git directory to suggest otherwise.

After the first "git clone" or "git init" operation, git sets the "current branch" to be "master" and will make sure that the working tree reflects the commit to which the "master" branch points. Each commit will have its parent set to the commit currently marked "master", and "master" will be moved to that new commit, ready for the next one.

Portability

Git is primarily developed on GNU/Linux, although it also supports most major operating systems including BSD, Solaris, OS X, and Microsoft Windows.[41]

The JGit implementation of Git is a pure Java software library, designed to be embedded in any Java application.[42]

The Dulwich implementation of Git is a pure Python software component for Python 2.[43]

The libgit2 implementation of Git is an ANSI C software library, which can be built on multiple platforms including Microsoft Windows, Linux, Mac OS X, and BSD.[44] It is used as the basis for Git libraries for the Ruby and Python programming languages.[45][46]
Adoption

The Eclipse Foundation reported in its annual community survey that as of May 2012 Git is the primary source control system used by over 27% of professional software developers, an increase from 12.8% in 2011.[47] Open source directory Ohloh reports a similar uptake among open source projects.[48]

The UK IT jobs website itjobswatch.co.uk reports that as of July 2012, approximately 7% of UK permanent software development job openings list Git as a requirement,[49] compared to 19.9% for Subversion,[50] 9.1% for Microsoft Team Foundation Server,[51] and 2.6% for Visual SourceSafe.[52]

Source code hosting
See also: Comparison of open source software hosting facilities

The following Web sites provide free source code hosting for Git repositories:[53]

    BerliOS
    Bitbucket
    CodePlex[54]
    GitHub
    Gitorious
    GNU Savannah
    Google Code
    JavaForge (with pull requests to control source code contribution)
    SourceForge

See also
Portal icon 	Free software portal

    Comparison of revision control software
    Comparison of open source software hosting facilities
    Distributed revision control
    List of revision control software
    Repo (script)
    Gerrit (software)

References

   1. ^ Hamano, Junio (2012-08-20). "[ANNOUNCE] Git 1.7.12". kernel mailing list. Retrieved 2012-08-20.
   2. ^ "git/git.git/tree". git.kernel.org. Retrieved 2009-06-15.
   3. ^ Linus Torvalds (2005-04-07). "Re: Kernel SCM saga..". linux-kernel mailing list. "So I'm writing some scripts to try to track things a whole lot f